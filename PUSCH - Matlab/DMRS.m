% inputs: Mzc (sequence length), u (group number), v (sequence number)
% outputs: PAPR_seq

function PAPR_seq = DMRS (u, v, Mzc)
%% Nzc & its reciprocal LUT
prime_init = [31 41 47 53 59 61 71 73 83 89 101 107 113 131 137 139 149 151 157 167 173 179 181 191 197 199 211 227 233 239 241 251 257 263 269 271 281 283 293 311 317 331 337 347 353 359 367 373 383 389 401 409 419 421 431 433 443 449 461 467 479 491 503 521 523 541 547 557 563 569 571 577 587 593 599];
prime_init_rec = Quantizer((1./prime_init),0,34);

flag = 0;
ind = 75;
for i = 2 : 75
    if (Mzc < prime_init(i)) && (flag == 0)
	    Nzc = prime_init(i-1);
        flag = 1;
        ind = i-1;
        
    elseif flag == 0
        Nzc = 599;
    end
end

Nzc_rec = prime_init_rec(ind);
PAPR_seq = zeros(Mzc, 1);
zadoff_chu_seq = zeros(Nzc, 1);

% Zadoff Chu sequence calculations
step_group = Quantizer(1/31,0,20);
q_dash = Nzc * (u+1) * step_group;
q_dash = Quantizer(q_dash,10,5);
% For maximuim q_dash will be stored in 10 bits
q = floor(q_dash + 1/2) + v * (-1) ^ floor(2*q_dash);

% Base sequence calculations
n = 0 : Mzc - 1;

%% For Sequence length is more than or equal 36 (zadoff chu sequence)
if Mzc >= 36
    step = 0;
    phase = 0;
    zadoff_chu_seq (1) = SinLUT (0.25 + phase) - 1i * SinLUT (phase);
    
    % phase calculations
    for k = 2 : Nzc
        % step calculations
        step_i = Quantizer(q * Nzc_rec,0,26);
        step = step + step_i;
        step = Quantizer(step,1,26);
        step = Wrapper(step);
        
        phase = phase + step;
        % Quantization for phase before going to sin LUT
        phase = Quantizer(phase,1,15);
        phase = Wrapper(phase);

        zadoff_chu_seq (k) = SinLUT (0.25 + phase) - 1i * SinLUT (phase); % exp(-1i * phase)
        zadoff_chu_seq = Quantizer(zadoff_chu_seq,0,8);
    end
    PAPR_seq (n + 1) = zadoff_chu_seq (mod(n,Nzc) + 1);


% For Sequence length is equal to 30
elseif Mzc == 30
    step_i = Quantizer((u+1) * step_group,0,26);
    step = step_i;
    phase = Quantizer(step,0,15);
    PAPR_seq (1) = SinLUT (0.25 + phase) - 1i * SinLUT (phase);

    % phase calculations
    for j = 2 : Mzc
        % step calculations
        step = step + step_i;
        step = Quantizer(step,1,26);
        step = Wrapper(step);

        phase = phase + step;
        % Quantization for phase before going to sin LUT
        phase = Quantizer(phase,1,15);
        phase = Wrapper(phase);

        PAPR_seq (j) = SinLUT (0.25+phase) - 1i * SinLUT (phase); % exp(-1i * phase)
        PAPR_seq = Quantizer(PAPR_seq,0,8);
    end

% For Sequence length is less than 30 (Phi table)
elseif Mzc < 30
    % Phi Tables
    if Mzc == 6
        phi = [-3 -1 3 3 -1 -3 ;
            -3 3 -1 -1 3 -3 ;
            -3 -3 -3 3 1 -3 ;
            1 1 1 3 -1 -3 ;
            1 1 1 -3 -1 3 ;
            -3 1 -1 -3 -3 -3;
            -3 1 3 -3 -3 -3 ;
            -3 -1 1 -3 1 -1 ;
            -3 -1 -3 1 -3 -3 ;
            -3 -3 1 -3 3 -3 ;
            -3 1 3 1 -3 -3 ;
            -3 -1 -3 1 1 -3 ;
            1 1 3 -1 -3 3 ;
            1 1 3 3 -1 3 ;
            1 1 1 -3 3 -1 ;
            1 1 1 -1 3 -3 ;
            -3 -1 -1 -1 3 -1 ;
            -3 -3 -1 1 -1 -3 ;
            -3 -3 -3 1 -3 -1 ;
            -3 1 1 -3 -1 -3 ;
            -3 3 -3 1 1 -3 ;
            -3 1 -3 -3 -3 -1 ;
            1 1 -3 3 1 3 ;
            1 1 -3 -3 1 -3 ;
            1 1 3 -1 3 3 ;
            1 1 -3 1 3 3 ;
            1 1 -1 -1 3 -1 ;
            1 1 -1 3 -1 -1 ;
            1 1 -1 3 -3 -1 ;
            1 1 -3 1 -1 -1];

    elseif Mzc == 12
        phi = [ -3 1 -3 -3 -3 3 -3 -1 1 1 1 -3 ;
            -3 3 1 -3 1 3 -1 -1 1 3 3 3 ;
            -3 3 3 1 -3 3 -1 1 3 -3 3 -3 ;
            -3 -3 -1 3 3 3 -3 3 -3 1 -1 -3 ;
            -3 -1 -1 1 3 1 1 -1 1 -1 -3 1 ;
            -3 -3 3 1 -3 -3 -3 -1 3 -1 1 3 ;
            1 -1 3 -1 -1 -1 -3 -1 1 1 1 -3 ;
            -1 -3 3 -1 -3 -3 -3 -1 1 -1 1 -3 ;
            -3 -1 3 1 -3 -1 -3 3 1 3 3 1 ;
            -3 -1 -1 -3 -3 -1 -3 3 1 3 -1 -3 ;
            -3 3 -3 3 3 -3 -1 -1 3 3 1 -3 ;
            -3 -1 -3 -1 -1 -3 3 3 -1 -1 1 -3 ;
            -3 -1 3 -3 -3 -1 -3 1 -1 -3 3 3 ;
            -3 1 -1 -1 3 3 -3 -1 -1 -3 -1 -3 ;
            1 3 -3 1 3 3 3 1 -1 1 -1 3 ;
            -3 1 3 -1 -1 -3 -3 -1 -1 3 1 -3 ;
            -1 -1 -1 -1 1 -3 -1 3 3 -1 -3 1 ;
            -1 1 1 -1 1 3 3 -1 -1 -3 1 -3 ;
            -3 1 3 3 -1 -1 -3 3 3 -3 3 -3 ;
            -3 -3 3 -3 -1 3 3 3 -1 -3 1 -3 ;
            3 1 3 1 3 -3 -1 1 3 1 -1 -3 ;
            -3 3 1 3 -3 1 1 1 1 3 -3 3 ;
            -3 3 3 3 -1 -3 -3 -1 -3 1 3 -3 ;
            3 -1 -3 3 -3 -1 3 3 3 -3 -1 -3 ;
            -3 -1 1 -3 1 3 3 3 -1 -3 3 3 ;
            -3 3 1 -1 3 3 -3 1 -1 1 -1 1 ;
            -1 1 3 -3 1 -1 1 -1 -1 -3 1 -1 ;
            -3 -3 3 3 3 -3 -1 1 -3 3 1 -3 ;
            1 -1 3 1 1 -1 -1 -1 1 3 -3 1 ;
            -3 3 -3 3 -3 -3 3 -1 -1 1 3 -3 ];

    elseif Mzc == 18

        phi = [-1 3 -1 -3 3 1 -3 -1 3 -3 -1 -1 1 1 1 -1 -1 -1 ;
            3 -3 3 -1 1 3 -3 -1 -3 -3 -1 -3 3 1 -1 3 -3 3 ;
            -3 3 1 -1 -1 3 -3 -1 1 1 1 1 1 -1 3 -1 -3 -1 ;
            -3 -3 3 3 3 1 -3 1 3 3 1 -3 -3 3 -1 -3 -1 1 ;
            1 1 -1 -1 -3 -1 1 -3 -3 -3 1 -3 -1 -1 1 -1 3 1 ;
            3 -3 1 1 3 -1 1 -1 -1 -3 1 1 -1 3 3 -3 3 -1 ;
            -3 3 -1 1 3 1 -3 -1 1 1 -3 1 3 3 -1 -3 -3 -3 ;
            1 1 -3 3 3 1 3 -3 3 -1 1 1 -1 1 -3 -3 -1 3 ;
            -3 1 -3 -3 1 -3 -3 3 1 -3 -1 -3 -3 -3 -1 1 1 3 ;
            3 -1 3 1 -3 -3 -1 1 -3 -3 3 3 3 1 3 -3 3 -3 ;
            -3 -3 -3 1 -3 3 1 1 3 -3 -3 1 3 -1 3 -3 -3 3 ;
            -3 -3 3 3 3 -1 -1 -3 -1 -1 -1 3 1 -3 -3 -1 3 -1 ;
            -3 -1 -3 -3 1 1 -1 -3 -1 -3 -1 -1 3 3 -1 3 1 3 ;
            1 1 -3 -3 -3 -3 1 3 -3 3 3 1 -3 -1 3 -1 -3 1 ;
            -3 3 -1 -3 -1 -3 1 1 -3 -3 -1 -1 3 -3 1 3 1 1 ;
            3 1 -3 1 -3 3 3 -1 -3 -3 -1 -3 -3 3 -3 -1 1 3 ;
            -3 -1 -3 -1 -3 1 3 -3 -1 3 3 3 1 -1 -3 3 -1 -3 ;
            -3 -1 3 3 -1 3 -1 -3 -1 1 -1 -3 -1 -1 -1 3 3 1 ;
            -3 1 -3 -1 -1 3 1 -3 -3 -3 -1 -3 -3 1 1 1 -1 -1 ;
            3 3 3 -3 -1 -3 -1 3 -1 1 -1 -3 1 -3 -3 -1 3 3 ;
            -3 1 1 -3 1 1 3 -3 -1 -3 -1 3 -3 3 -1 -1 -1 -3 ;
            1 -3 -1 -3 3 3 -1 -3 1 -3 -3 -1 -3 -1 1 3 3 3 ;
            -3 -3 1 -1 -1 1 1 -3 -1 3 3 3 3 -1 3 1 3 1 ;
            3 -1 -3 1 -3 -3 -3 3 3 -1 1 -3 -1 3 1 1 3 3 ;
            3 -1 -1 1 -3 -1 -3 -1 -3 -3 -1 -3 1 1 1 -3 -3 3 ;
            -3 -3 1 -3 3 3 3 -1 3 1 1 -3 -3 -3 3 -3 -1 -1 ;
            -3 -1 -1 -3 1 -3 3 -1 -1 -3 3 3 -3 -1 3 -1 -1 -1 ;
            -3 -3 3 3 -3 1 3 -1 -3 1 -1 -3 3 -3 -1 -1 -1 3 ;
            -1 -3 1 -3 -3 -3 1 1 3 3 -3 3 3 -3 -1 3 -3 1 ;
            -3 3 1 -1 -1 -1 -1 1 -1 3 3 -3 -1 1 3 -1 3 -1 ];

    elseif Mzc == 24

        phi = [ -1 -3 3 -1 3 1 3 -1 1 -3 -1 -3 -1 1 3 -3 -1 -3 3 3 3 -3 -3 -3 ;
            -1 -3 3 1 1 -3 1 -3 -3 1 -3 -1 -1 3 -3 3 3 3 -3 1 3 3 -3 -3 ;
            -1 -3 -3 1 -1 -1 -3 1 3 -1 -3 -1 -1 -3 1 1 3 1 -3 -1 -1 3 -3 -3 ;
            1 -3 3 -1 -3 -1 3 3 1 -1 1 1 3 -3 -1 -3 -3 -3 -1 3 -3 -1 -3 -3 ;
            -1 3 -3 -3 -1 3 -1 -1 1 3 1 3 -1 -1 -3 1 3 1 -1 -3 1 -1 -3 -3 ;
            -3 -1 1 -3 -3 1 1 -3 3 -1 -1 -3 1 3 1 -1 -3 -1 -3 1 -3 -3 -3 -3 ;
            -3 3 1 3 -1 1 -3 1 -3 1 -1 -3 -1 -3 -3 -3 -3 -1 -1 -1 1 1 -3 -3 ;
            -3 1 3 -1 1 -1 3 -3 3 -1 -3 -1 -3 3 -1 -1 -1 -3 -1 -1 -3 3 3 -3 ;
            -3 1 -3 3 -1 -1 -1 -3 3 1 -1 -3 -1 1 3 -1 1 -1 1 -3 -3 -3 -3 -3 ;
            1 1 -1 -3 -1 1 1 -3 1 -1 1 -3 3 -3 -3 3 -1 -3 1 3 -3 1 -3 -3 ;
            -3 -3 -3 -1 3 -3 3 1 3 1 -3 -1 -1 -3 1 1 3 1 -1 -3 3 1 3 -3 ;
            -3 3 -1 3 1 -1 -1 -1 3 3 1 1 1 3 3 1 -3 -3 -1 1 -3 1 3 -3 ;
            3 -3 3 -1 -3 1 3 1 -1 -1 -3 -1 3 -3 3 -1 -1 3 3 -3 -3 3 -3 -3 ;
            -3 3 -1 3 -1 3 3 1 1 -3 1 3 -3 3 -3 -3 -1 1 3 -3 -1 -1 -3 -3 ;
            -3 1 -3 -1 -1 3 1 3 -3 1 -1 3 3 -1 -3 3 -3 -1 -1 -3 -3 -3 3 -3 ;
            -3 -1 -1 -3 1 -3 -3 -1 -1 3 -1 1 -1 3 1 -3 -1 3 1 1 -1 -1 -3 -3 ;
            -3 -3 1 -1 3 3 -3 -1 1 -1 -1 1 1 -1 -1 3 -3 1 -3 1 -1 -1 -1 -3 ;
            3 -1 3 -1 1 -3 1 1 -3 -3 3 -3 -1 -1 -1 -1 -1 -3 -3 -1 1 1 -3 -3 ;
            -3 1 -3 1 -3 -3 1 -3 1 -3 -3 -3 -3 -3 1 -3 -3 1 1 -3 1 1 -3 -3 ;
            -3 -3 3 3 1 -1 -1 -1 1 -3 -1 1 -1 3 -3 -1 -3 -1 -1 1 -3 3 -1 -3 ;
            -3 -3 -1 -1 -1 -3 1 -1 -3 -1 3 -3 1 -3 3 -3 3 3 1 -1 -1 1 -3 -3 ;
            3 -1 1 -1 3 -3 1 1 3 -1 -3 3 1 -3 3 -1 -1 -1 -1 1 -3 -3 -3 -3 ;
            -3 1 -3 3 -3 1 -3 3 1 -1 -3 -1 -3 -3 -3 -3 1 3 -1 1 3 3 3 -3 ;
            -3 -1 1 -3 -1 -1 1 1 1 3 3 -1 1 -1 1 -1 -1 -3 -3 -3 3 1 -1 -3 ;
            -3 3 -1 -3 -1 -1 -1 3 -1 -1 3 -3 -1 3 -3 3 -3 -1 3 1 1 -1 -3 -3 ;
            -3 1 -1 -3 -3 -1 1 -3 -1 -3 1 1 -1 1 1 3 3 3 -1 1 -1 1 -1 -3 ;
            -1 3 -1 -1 3 3 -1 -1 -1 3 -1 -3 1 3 1 1 -3 -3 -3 -1 -3 -1 -3 -3 ;
            3 -3 -3 -1 3 3 -3 -1 3 1 1 1 3 -1 3 -3 -1 3 -1 3 1 -1 -3 -3 ;
            -3 1 -3 1 -3 1 1 3 1 -3 -3 -1 1 3 -1 -3 3 1 -1 -3 -3 -3 -3 -3 ;
            3 -3 -1 1 3 -1 -1 -3 -1 3 -1 -3 -1 -3 3 -1 3 1 1 -3 3 -3 -3 -3];
    end

    % Base sequence calculations
    for n = 1 : Mzc
        phase = (phi(u + 1, n)) / 8; % shift right (3)
        phase = Wrapper(phase);
        % Quantization for phase before going to sin LUT
        phase = Quantizer(phase,1,3);
        PAPR_seq (n) = SinLUT (0.25 + phase) + 1i * SinLUT (phase); % exp(-1i * phase)
        PAPR_seq = Quantizer(PAPR_seq,0,8);
    end
end
end